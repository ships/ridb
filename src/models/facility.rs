/* 
 * RIDB API
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Facility {
  #[serde(rename = "FacilityID")]
  facility_id: String,
  #[serde(rename = "LegacyFacilityID")]
  legacy_facility_id: String,
  #[serde(rename = "OrgFacilityID")]
  org_facility_id: String,
  #[serde(rename = "ParentOrgID")]
  parent_org_id: Option<String>,
  #[serde(rename = "ParentRecAreaID")]
  parent_rec_area_id: Option<String>,
  #[serde(rename = "FacilityName")]
  facility_name: String,
  #[serde(rename = "FacilityDescription")]
  facility_description: String,
  #[serde(rename = "FacilityTypeDescription")]
  facility_type_description: String,
  #[serde(rename = "FacilityUseFeeDescription")]
  facility_use_fee_description: String,
  #[serde(rename = "FacilityDirections")]
  facility_directions: String,
  #[serde(rename = "FacilityPhone")]
  facility_phone: String,
  #[serde(rename = "FacilityEmail")]
  facility_email: String,
  #[serde(rename = "FacilityReservationURL")]
  facility_reservation_url: String,
  #[serde(rename = "FacilityMapURL")]
  facility_map_url: String,
  #[serde(rename = "FacilityAdaAccess")]
  facility_ada_access: String,
  #[serde(rename = "GEOJSON")]
  GEOJSON: ::models::FacilityGeojson,
  #[serde(rename = "FacilityLongitude")]
  facility_longitude: f64,
  #[serde(rename = "FacilityLatitude")]
  facility_latitude: f64,
  #[serde(rename = "StayLimit")]
  stay_limit: String,
  #[serde(rename = "Keywords")]
  keywords: String,
  #[serde(rename = "Reservable")]
  reservable: bool,
  #[serde(rename = "Enabled")]
  enabled: bool,
  #[serde(rename = "CAMPSITE")]
  CAMPSITE: Option<Vec<::models::FacilityCampsite>>,
  #[serde(rename = "PERMITENTRANCE")]
  PERMITENTRANCE: Option<Vec<::models::FacilityPermitEntrance>>,
  #[serde(rename = "TOUR")]
  TOUR: Option<Vec<::models::FacilityTour>>,
  #[serde(rename = "ORGANIZATION")]
  ORGANIZATION: Option<Vec<::models::Organization>>,
  #[serde(rename = "RECAREA")]
  RECAREA: Option<Vec<::models::FacilityRecArea>>,
  #[serde(rename = "FACILITYADDRESS")]
  FACILITYADDRESS: Option<Vec<::models::FacilityAddress>>,
  #[serde(rename = "ACTIVITY")]
  ACTIVITY: Option<Vec<::models::FacilityActivity>>,
  #[serde(rename = "EVENT")]
  EVENT: Option<Vec<::models::Event>>,
  #[serde(rename = "LINK")]
  LINK: Option<Vec<::models::Link>>,
  #[serde(rename = "MEDIA")]
  MEDIA: Option<Vec<::models::Media>>
}

impl Facility {
  pub fn new(facility_id: String, legacy_facility_id: String, org_facility_id: String, facility_name: String, facility_description: String, facility_type_description: String, facility_use_fee_description: String, facility_directions: String, facility_phone: String, facility_email: String, facility_reservation_url: String, facility_map_url: String, facility_ada_access: String, GEOJSON: ::models::FacilityGeojson, facility_longitude: f64, facility_latitude: f64, stay_limit: String, keywords: String, reservable: bool, enabled: bool) -> Facility {
    Facility {
      facility_id: facility_id,
      legacy_facility_id: legacy_facility_id,
      org_facility_id: org_facility_id,
      parent_org_id: None,
      parent_rec_area_id: None,
      facility_name: facility_name,
      facility_description: facility_description,
      facility_type_description: facility_type_description,
      facility_use_fee_description: facility_use_fee_description,
      facility_directions: facility_directions,
      facility_phone: facility_phone,
      facility_email: facility_email,
      facility_reservation_url: facility_reservation_url,
      facility_map_url: facility_map_url,
      facility_ada_access: facility_ada_access,
      GEOJSON: GEOJSON,
      facility_longitude: facility_longitude,
      facility_latitude: facility_latitude,
      stay_limit: stay_limit,
      keywords: keywords,
      reservable: reservable,
      enabled: enabled,
      CAMPSITE: None,
      PERMITENTRANCE: None,
      TOUR: None,
      ORGANIZATION: None,
      RECAREA: None,
      FACILITYADDRESS: None,
      ACTIVITY: None,
      EVENT: None,
      LINK: None,
      MEDIA: None
    }
  }

  pub fn set_facility_id(&mut self, facility_id: String) {
    self.facility_id = facility_id;
  }

  pub fn with_facility_id(mut self, facility_id: String) -> Facility {
    self.facility_id = facility_id;
    self
  }

  pub fn facility_id(&self) -> &String {
    &self.facility_id
  }


  pub fn set_legacy_facility_id(&mut self, legacy_facility_id: String) {
    self.legacy_facility_id = legacy_facility_id;
  }

  pub fn with_legacy_facility_id(mut self, legacy_facility_id: String) -> Facility {
    self.legacy_facility_id = legacy_facility_id;
    self
  }

  pub fn legacy_facility_id(&self) -> &String {
    &self.legacy_facility_id
  }


  pub fn set_org_facility_id(&mut self, org_facility_id: String) {
    self.org_facility_id = org_facility_id;
  }

  pub fn with_org_facility_id(mut self, org_facility_id: String) -> Facility {
    self.org_facility_id = org_facility_id;
    self
  }

  pub fn org_facility_id(&self) -> &String {
    &self.org_facility_id
  }


  pub fn set_parent_org_id(&mut self, parent_org_id: String) {
    self.parent_org_id = Some(parent_org_id);
  }

  pub fn with_parent_org_id(mut self, parent_org_id: String) -> Facility {
    self.parent_org_id = Some(parent_org_id);
    self
  }

  pub fn parent_org_id(&self) -> Option<&String> {
    self.parent_org_id.as_ref()
  }

  pub fn reset_parent_org_id(&mut self) {
    self.parent_org_id = None;
  }

  pub fn set_parent_rec_area_id(&mut self, parent_rec_area_id: String) {
    self.parent_rec_area_id = Some(parent_rec_area_id);
  }

  pub fn with_parent_rec_area_id(mut self, parent_rec_area_id: String) -> Facility {
    self.parent_rec_area_id = Some(parent_rec_area_id);
    self
  }

  pub fn parent_rec_area_id(&self) -> Option<&String> {
    self.parent_rec_area_id.as_ref()
  }

  pub fn reset_parent_rec_area_id(&mut self) {
    self.parent_rec_area_id = None;
  }

  pub fn set_facility_name(&mut self, facility_name: String) {
    self.facility_name = facility_name;
  }

  pub fn with_facility_name(mut self, facility_name: String) -> Facility {
    self.facility_name = facility_name;
    self
  }

  pub fn facility_name(&self) -> &String {
    &self.facility_name
  }


  pub fn set_facility_description(&mut self, facility_description: String) {
    self.facility_description = facility_description;
  }

  pub fn with_facility_description(mut self, facility_description: String) -> Facility {
    self.facility_description = facility_description;
    self
  }

  pub fn facility_description(&self) -> &String {
    &self.facility_description
  }


  pub fn set_facility_type_description(&mut self, facility_type_description: String) {
    self.facility_type_description = facility_type_description;
  }

  pub fn with_facility_type_description(mut self, facility_type_description: String) -> Facility {
    self.facility_type_description = facility_type_description;
    self
  }

  pub fn facility_type_description(&self) -> &String {
    &self.facility_type_description
  }


  pub fn set_facility_use_fee_description(&mut self, facility_use_fee_description: String) {
    self.facility_use_fee_description = facility_use_fee_description;
  }

  pub fn with_facility_use_fee_description(mut self, facility_use_fee_description: String) -> Facility {
    self.facility_use_fee_description = facility_use_fee_description;
    self
  }

  pub fn facility_use_fee_description(&self) -> &String {
    &self.facility_use_fee_description
  }


  pub fn set_facility_directions(&mut self, facility_directions: String) {
    self.facility_directions = facility_directions;
  }

  pub fn with_facility_directions(mut self, facility_directions: String) -> Facility {
    self.facility_directions = facility_directions;
    self
  }

  pub fn facility_directions(&self) -> &String {
    &self.facility_directions
  }


  pub fn set_facility_phone(&mut self, facility_phone: String) {
    self.facility_phone = facility_phone;
  }

  pub fn with_facility_phone(mut self, facility_phone: String) -> Facility {
    self.facility_phone = facility_phone;
    self
  }

  pub fn facility_phone(&self) -> &String {
    &self.facility_phone
  }


  pub fn set_facility_email(&mut self, facility_email: String) {
    self.facility_email = facility_email;
  }

  pub fn with_facility_email(mut self, facility_email: String) -> Facility {
    self.facility_email = facility_email;
    self
  }

  pub fn facility_email(&self) -> &String {
    &self.facility_email
  }


  pub fn set_facility_reservation_url(&mut self, facility_reservation_url: String) {
    self.facility_reservation_url = facility_reservation_url;
  }

  pub fn with_facility_reservation_url(mut self, facility_reservation_url: String) -> Facility {
    self.facility_reservation_url = facility_reservation_url;
    self
  }

  pub fn facility_reservation_url(&self) -> &String {
    &self.facility_reservation_url
  }


  pub fn set_facility_map_url(&mut self, facility_map_url: String) {
    self.facility_map_url = facility_map_url;
  }

  pub fn with_facility_map_url(mut self, facility_map_url: String) -> Facility {
    self.facility_map_url = facility_map_url;
    self
  }

  pub fn facility_map_url(&self) -> &String {
    &self.facility_map_url
  }


  pub fn set_facility_ada_access(&mut self, facility_ada_access: String) {
    self.facility_ada_access = facility_ada_access;
  }

  pub fn with_facility_ada_access(mut self, facility_ada_access: String) -> Facility {
    self.facility_ada_access = facility_ada_access;
    self
  }

  pub fn facility_ada_access(&self) -> &String {
    &self.facility_ada_access
  }


  pub fn set_GEOJSON(&mut self, GEOJSON: ::models::FacilityGeojson) {
    self.GEOJSON = GEOJSON;
  }

  pub fn with_GEOJSON(mut self, GEOJSON: ::models::FacilityGeojson) -> Facility {
    self.GEOJSON = GEOJSON;
    self
  }

  pub fn GEOJSON(&self) -> &::models::FacilityGeojson {
    &self.GEOJSON
  }


  pub fn set_facility_longitude(&mut self, facility_longitude: f64) {
    self.facility_longitude = facility_longitude;
  }

  pub fn with_facility_longitude(mut self, facility_longitude: f64) -> Facility {
    self.facility_longitude = facility_longitude;
    self
  }

  pub fn facility_longitude(&self) -> &f64 {
    &self.facility_longitude
  }


  pub fn set_facility_latitude(&mut self, facility_latitude: f64) {
    self.facility_latitude = facility_latitude;
  }

  pub fn with_facility_latitude(mut self, facility_latitude: f64) -> Facility {
    self.facility_latitude = facility_latitude;
    self
  }

  pub fn facility_latitude(&self) -> &f64 {
    &self.facility_latitude
  }


  pub fn set_stay_limit(&mut self, stay_limit: String) {
    self.stay_limit = stay_limit;
  }

  pub fn with_stay_limit(mut self, stay_limit: String) -> Facility {
    self.stay_limit = stay_limit;
    self
  }

  pub fn stay_limit(&self) -> &String {
    &self.stay_limit
  }


  pub fn set_keywords(&mut self, keywords: String) {
    self.keywords = keywords;
  }

  pub fn with_keywords(mut self, keywords: String) -> Facility {
    self.keywords = keywords;
    self
  }

  pub fn keywords(&self) -> &String {
    &self.keywords
  }


  pub fn set_reservable(&mut self, reservable: bool) {
    self.reservable = reservable;
  }

  pub fn with_reservable(mut self, reservable: bool) -> Facility {
    self.reservable = reservable;
    self
  }

  pub fn reservable(&self) -> &bool {
    &self.reservable
  }


  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = enabled;
  }

  pub fn with_enabled(mut self, enabled: bool) -> Facility {
    self.enabled = enabled;
    self
  }

  pub fn enabled(&self) -> &bool {
    &self.enabled
  }


  pub fn set_CAMPSITE(&mut self, CAMPSITE: Vec<::models::FacilityCampsite>) {
    self.CAMPSITE = Some(CAMPSITE);
  }

  pub fn with_CAMPSITE(mut self, CAMPSITE: Vec<::models::FacilityCampsite>) -> Facility {
    self.CAMPSITE = Some(CAMPSITE);
    self
  }

  pub fn CAMPSITE(&self) -> Option<&Vec<::models::FacilityCampsite>> {
    self.CAMPSITE.as_ref()
  }

  pub fn reset_CAMPSITE(&mut self) {
    self.CAMPSITE = None;
  }

  pub fn set_PERMITENTRANCE(&mut self, PERMITENTRANCE: Vec<::models::FacilityPermitEntrance>) {
    self.PERMITENTRANCE = Some(PERMITENTRANCE);
  }

  pub fn with_PERMITENTRANCE(mut self, PERMITENTRANCE: Vec<::models::FacilityPermitEntrance>) -> Facility {
    self.PERMITENTRANCE = Some(PERMITENTRANCE);
    self
  }

  pub fn PERMITENTRANCE(&self) -> Option<&Vec<::models::FacilityPermitEntrance>> {
    self.PERMITENTRANCE.as_ref()
  }

  pub fn reset_PERMITENTRANCE(&mut self) {
    self.PERMITENTRANCE = None;
  }

  pub fn set_TOUR(&mut self, TOUR: Vec<::models::FacilityTour>) {
    self.TOUR = Some(TOUR);
  }

  pub fn with_TOUR(mut self, TOUR: Vec<::models::FacilityTour>) -> Facility {
    self.TOUR = Some(TOUR);
    self
  }

  pub fn TOUR(&self) -> Option<&Vec<::models::FacilityTour>> {
    self.TOUR.as_ref()
  }

  pub fn reset_TOUR(&mut self) {
    self.TOUR = None;
  }

  pub fn set_ORGANIZATION(&mut self, ORGANIZATION: Vec<::models::Organization>) {
    self.ORGANIZATION = Some(ORGANIZATION);
  }

  pub fn with_ORGANIZATION(mut self, ORGANIZATION: Vec<::models::Organization>) -> Facility {
    self.ORGANIZATION = Some(ORGANIZATION);
    self
  }

  pub fn ORGANIZATION(&self) -> Option<&Vec<::models::Organization>> {
    self.ORGANIZATION.as_ref()
  }

  pub fn reset_ORGANIZATION(&mut self) {
    self.ORGANIZATION = None;
  }

  pub fn set_RECAREA(&mut self, RECAREA: Vec<::models::FacilityRecArea>) {
    self.RECAREA = Some(RECAREA);
  }

  pub fn with_RECAREA(mut self, RECAREA: Vec<::models::FacilityRecArea>) -> Facility {
    self.RECAREA = Some(RECAREA);
    self
  }

  pub fn RECAREA(&self) -> Option<&Vec<::models::FacilityRecArea>> {
    self.RECAREA.as_ref()
  }

  pub fn reset_RECAREA(&mut self) {
    self.RECAREA = None;
  }

  pub fn set_FACILITYADDRESS(&mut self, FACILITYADDRESS: Vec<::models::FacilityAddress>) {
    self.FACILITYADDRESS = Some(FACILITYADDRESS);
  }

  pub fn with_FACILITYADDRESS(mut self, FACILITYADDRESS: Vec<::models::FacilityAddress>) -> Facility {
    self.FACILITYADDRESS = Some(FACILITYADDRESS);
    self
  }

  pub fn FACILITYADDRESS(&self) -> Option<&Vec<::models::FacilityAddress>> {
    self.FACILITYADDRESS.as_ref()
  }

  pub fn reset_FACILITYADDRESS(&mut self) {
    self.FACILITYADDRESS = None;
  }

  pub fn set_ACTIVITY(&mut self, ACTIVITY: Vec<::models::FacilityActivity>) {
    self.ACTIVITY = Some(ACTIVITY);
  }

  pub fn with_ACTIVITY(mut self, ACTIVITY: Vec<::models::FacilityActivity>) -> Facility {
    self.ACTIVITY = Some(ACTIVITY);
    self
  }

  pub fn ACTIVITY(&self) -> Option<&Vec<::models::FacilityActivity>> {
    self.ACTIVITY.as_ref()
  }

  pub fn reset_ACTIVITY(&mut self) {
    self.ACTIVITY = None;
  }

  pub fn set_EVENT(&mut self, EVENT: Vec<::models::Event>) {
    self.EVENT = Some(EVENT);
  }

  pub fn with_EVENT(mut self, EVENT: Vec<::models::Event>) -> Facility {
    self.EVENT = Some(EVENT);
    self
  }

  pub fn EVENT(&self) -> Option<&Vec<::models::Event>> {
    self.EVENT.as_ref()
  }

  pub fn reset_EVENT(&mut self) {
    self.EVENT = None;
  }

  pub fn set_LINK(&mut self, LINK: Vec<::models::Link>) {
    self.LINK = Some(LINK);
  }

  pub fn with_LINK(mut self, LINK: Vec<::models::Link>) -> Facility {
    self.LINK = Some(LINK);
    self
  }

  pub fn LINK(&self) -> Option<&Vec<::models::Link>> {
    self.LINK.as_ref()
  }

  pub fn reset_LINK(&mut self) {
    self.LINK = None;
  }

  pub fn set_MEDIA(&mut self, MEDIA: Vec<::models::Media>) {
    self.MEDIA = Some(MEDIA);
  }

  pub fn with_MEDIA(mut self, MEDIA: Vec<::models::Media>) -> Facility {
    self.MEDIA = Some(MEDIA);
    self
  }

  pub fn MEDIA(&self) -> Option<&Vec<::models::Media>> {
    self.MEDIA.as_ref()
  }

  pub fn reset_MEDIA(&mut self) {
    self.MEDIA = None;
  }

}



