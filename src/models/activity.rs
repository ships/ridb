/* 
 * RIDB API
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Activity {
  #[serde(rename = "ActivityID")]
  activity_id: i32,
  #[serde(rename = "ActivityParentID")]
  activity_parent_id: i32,
  #[serde(rename = "Activity:Name")]
  activity_name: Option<String>,
  #[serde(rename = "ActivityLevel")]
  activity_level: i32
}

impl Activity {
  pub fn new(activity_id: i32, activity_parent_id: i32, activity_level: i32) -> Activity {
    Activity {
      activity_id: activity_id,
      activity_parent_id: activity_parent_id,
      activity_name: None,
      activity_level: activity_level
    }
  }

  pub fn set_activity_id(&mut self, activity_id: i32) {
    self.activity_id = activity_id;
  }

  pub fn with_activity_id(mut self, activity_id: i32) -> Activity {
    self.activity_id = activity_id;
    self
  }

  pub fn activity_id(&self) -> &i32 {
    &self.activity_id
  }


  pub fn set_activity_parent_id(&mut self, activity_parent_id: i32) {
    self.activity_parent_id = activity_parent_id;
  }

  pub fn with_activity_parent_id(mut self, activity_parent_id: i32) -> Activity {
    self.activity_parent_id = activity_parent_id;
    self
  }

  pub fn activity_parent_id(&self) -> &i32 {
    &self.activity_parent_id
  }


  pub fn set_activity_name(&mut self, activity_name: String) {
    self.activity_name = Some(activity_name);
  }

  pub fn with_activity_name(mut self, activity_name: String) -> Activity {
    self.activity_name = Some(activity_name);
    self
  }

  pub fn activity_name(&self) -> Option<&String> {
    self.activity_name.as_ref()
  }

  pub fn reset_activity_name(&mut self) {
    self.activity_name = None;
  }

  pub fn set_activity_level(&mut self, activity_level: i32) {
    self.activity_level = activity_level;
  }

  pub fn with_activity_level(mut self, activity_level: i32) -> Activity {
    self.activity_level = activity_level;
    self
  }

  pub fn activity_level(&self) -> &i32 {
    &self.activity_level
  }


}



