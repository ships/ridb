/* 
 * RIDB API
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Organization {
  #[serde(rename = "OrgID")]
  org_id: String,
  #[serde(rename = "OrgName")]
  org_name: String,
  #[serde(rename = "OrgImageURL")]
  org_image_url: String,
  #[serde(rename = "OrgURLText")]
  org_url_text: String,
  #[serde(rename = "OrgURLAddress")]
  org_url_address: String,
  #[serde(rename = "OrgType")]
  org_type: String,
  #[serde(rename = "OrgAbbrevName")]
  org_abbrev_name: String,
  #[serde(rename = "OrgJurisdictionType")]
  org_jurisdiction_type: String,
  #[serde(rename = "OrgParentID")]
  org_parent_id: String
}

impl Organization {
  pub fn new(org_id: String, org_name: String, org_image_url: String, org_url_text: String, org_url_address: String, org_type: String, org_abbrev_name: String, org_jurisdiction_type: String, org_parent_id: String) -> Organization {
    Organization {
      org_id: org_id,
      org_name: org_name,
      org_image_url: org_image_url,
      org_url_text: org_url_text,
      org_url_address: org_url_address,
      org_type: org_type,
      org_abbrev_name: org_abbrev_name,
      org_jurisdiction_type: org_jurisdiction_type,
      org_parent_id: org_parent_id
    }
  }

  pub fn set_org_id(&mut self, org_id: String) {
    self.org_id = org_id;
  }

  pub fn with_org_id(mut self, org_id: String) -> Organization {
    self.org_id = org_id;
    self
  }

  pub fn org_id(&self) -> &String {
    &self.org_id
  }


  pub fn set_org_name(&mut self, org_name: String) {
    self.org_name = org_name;
  }

  pub fn with_org_name(mut self, org_name: String) -> Organization {
    self.org_name = org_name;
    self
  }

  pub fn org_name(&self) -> &String {
    &self.org_name
  }


  pub fn set_org_image_url(&mut self, org_image_url: String) {
    self.org_image_url = org_image_url;
  }

  pub fn with_org_image_url(mut self, org_image_url: String) -> Organization {
    self.org_image_url = org_image_url;
    self
  }

  pub fn org_image_url(&self) -> &String {
    &self.org_image_url
  }


  pub fn set_org_url_text(&mut self, org_url_text: String) {
    self.org_url_text = org_url_text;
  }

  pub fn with_org_url_text(mut self, org_url_text: String) -> Organization {
    self.org_url_text = org_url_text;
    self
  }

  pub fn org_url_text(&self) -> &String {
    &self.org_url_text
  }


  pub fn set_org_url_address(&mut self, org_url_address: String) {
    self.org_url_address = org_url_address;
  }

  pub fn with_org_url_address(mut self, org_url_address: String) -> Organization {
    self.org_url_address = org_url_address;
    self
  }

  pub fn org_url_address(&self) -> &String {
    &self.org_url_address
  }


  pub fn set_org_type(&mut self, org_type: String) {
    self.org_type = org_type;
  }

  pub fn with_org_type(mut self, org_type: String) -> Organization {
    self.org_type = org_type;
    self
  }

  pub fn org_type(&self) -> &String {
    &self.org_type
  }


  pub fn set_org_abbrev_name(&mut self, org_abbrev_name: String) {
    self.org_abbrev_name = org_abbrev_name;
  }

  pub fn with_org_abbrev_name(mut self, org_abbrev_name: String) -> Organization {
    self.org_abbrev_name = org_abbrev_name;
    self
  }

  pub fn org_abbrev_name(&self) -> &String {
    &self.org_abbrev_name
  }


  pub fn set_org_jurisdiction_type(&mut self, org_jurisdiction_type: String) {
    self.org_jurisdiction_type = org_jurisdiction_type;
  }

  pub fn with_org_jurisdiction_type(mut self, org_jurisdiction_type: String) -> Organization {
    self.org_jurisdiction_type = org_jurisdiction_type;
    self
  }

  pub fn org_jurisdiction_type(&self) -> &String {
    &self.org_jurisdiction_type
  }


  pub fn set_org_parent_id(&mut self, org_parent_id: String) {
    self.org_parent_id = org_parent_id;
  }

  pub fn with_org_parent_id(mut self, org_parent_id: String) -> Organization {
    self.org_parent_id = org_parent_id;
    self
  }

  pub fn org_parent_id(&self) -> &String {
    &self.org_parent_id
  }


}



