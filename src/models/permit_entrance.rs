/* 
 * RIDB API
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PermitEntrance {
  #[serde(rename = "PermitEntranceID")]
  permit_entrance_id: String,
  #[serde(rename = "FacilityID")]
  facility_id: String,
  #[serde(rename = "PermitEntranceName")]
  permit_entrance_name: String,
  #[serde(rename = "PermitEntranceDescription")]
  permit_entrance_description: String,
  #[serde(rename = "District")]
  district: String,
  #[serde(rename = "Town")]
  town: String,
  #[serde(rename = "PermitEntranceAccessible")]
  permit_entrance_accessible: bool,
  #[serde(rename = "Longitude")]
  longitude: f64,
  #[serde(rename = "Latitude")]
  latitude: f64,
  #[serde(rename = "GEOSJON")]
  GEOSJON: Option<::models::FacilityGeojson>,
  #[serde(rename = "CreatedDate")]
  created_date: String,
  #[serde(rename = "LastUpdatedDate")]
  last_updated_date: String,
  #[serde(rename = "ATTRIBUTES")]
  ATTRIBUTES: Vec<::models::Attribute>,
  #[serde(rename = "ENTITYMEDIA")]
  ENTITYMEDIA: Vec<::models::Media>,
  #[serde(rename = "ZONES")]
  ZONES: Vec<::models::Zone>
}

impl PermitEntrance {
  pub fn new(permit_entrance_id: String, facility_id: String, permit_entrance_name: String, permit_entrance_description: String, district: String, town: String, permit_entrance_accessible: bool, longitude: f64, latitude: f64, created_date: String, last_updated_date: String, ATTRIBUTES: Vec<::models::Attribute>, ENTITYMEDIA: Vec<::models::Media>, ZONES: Vec<::models::Zone>) -> PermitEntrance {
    PermitEntrance {
      permit_entrance_id: permit_entrance_id,
      facility_id: facility_id,
      permit_entrance_name: permit_entrance_name,
      permit_entrance_description: permit_entrance_description,
      district: district,
      town: town,
      permit_entrance_accessible: permit_entrance_accessible,
      longitude: longitude,
      latitude: latitude,
      GEOSJON: None,
      created_date: created_date,
      last_updated_date: last_updated_date,
      ATTRIBUTES: ATTRIBUTES,
      ENTITYMEDIA: ENTITYMEDIA,
      ZONES: ZONES
    }
  }

  pub fn set_permit_entrance_id(&mut self, permit_entrance_id: String) {
    self.permit_entrance_id = permit_entrance_id;
  }

  pub fn with_permit_entrance_id(mut self, permit_entrance_id: String) -> PermitEntrance {
    self.permit_entrance_id = permit_entrance_id;
    self
  }

  pub fn permit_entrance_id(&self) -> &String {
    &self.permit_entrance_id
  }


  pub fn set_facility_id(&mut self, facility_id: String) {
    self.facility_id = facility_id;
  }

  pub fn with_facility_id(mut self, facility_id: String) -> PermitEntrance {
    self.facility_id = facility_id;
    self
  }

  pub fn facility_id(&self) -> &String {
    &self.facility_id
  }


  pub fn set_permit_entrance_name(&mut self, permit_entrance_name: String) {
    self.permit_entrance_name = permit_entrance_name;
  }

  pub fn with_permit_entrance_name(mut self, permit_entrance_name: String) -> PermitEntrance {
    self.permit_entrance_name = permit_entrance_name;
    self
  }

  pub fn permit_entrance_name(&self) -> &String {
    &self.permit_entrance_name
  }


  pub fn set_permit_entrance_description(&mut self, permit_entrance_description: String) {
    self.permit_entrance_description = permit_entrance_description;
  }

  pub fn with_permit_entrance_description(mut self, permit_entrance_description: String) -> PermitEntrance {
    self.permit_entrance_description = permit_entrance_description;
    self
  }

  pub fn permit_entrance_description(&self) -> &String {
    &self.permit_entrance_description
  }


  pub fn set_district(&mut self, district: String) {
    self.district = district;
  }

  pub fn with_district(mut self, district: String) -> PermitEntrance {
    self.district = district;
    self
  }

  pub fn district(&self) -> &String {
    &self.district
  }


  pub fn set_town(&mut self, town: String) {
    self.town = town;
  }

  pub fn with_town(mut self, town: String) -> PermitEntrance {
    self.town = town;
    self
  }

  pub fn town(&self) -> &String {
    &self.town
  }


  pub fn set_permit_entrance_accessible(&mut self, permit_entrance_accessible: bool) {
    self.permit_entrance_accessible = permit_entrance_accessible;
  }

  pub fn with_permit_entrance_accessible(mut self, permit_entrance_accessible: bool) -> PermitEntrance {
    self.permit_entrance_accessible = permit_entrance_accessible;
    self
  }

  pub fn permit_entrance_accessible(&self) -> &bool {
    &self.permit_entrance_accessible
  }


  pub fn set_longitude(&mut self, longitude: f64) {
    self.longitude = longitude;
  }

  pub fn with_longitude(mut self, longitude: f64) -> PermitEntrance {
    self.longitude = longitude;
    self
  }

  pub fn longitude(&self) -> &f64 {
    &self.longitude
  }


  pub fn set_latitude(&mut self, latitude: f64) {
    self.latitude = latitude;
  }

  pub fn with_latitude(mut self, latitude: f64) -> PermitEntrance {
    self.latitude = latitude;
    self
  }

  pub fn latitude(&self) -> &f64 {
    &self.latitude
  }


  pub fn set_GEOSJON(&mut self, GEOSJON: ::models::FacilityGeojson) {
    self.GEOSJON = Some(GEOSJON);
  }

  pub fn with_GEOSJON(mut self, GEOSJON: ::models::FacilityGeojson) -> PermitEntrance {
    self.GEOSJON = Some(GEOSJON);
    self
  }

  pub fn GEOSJON(&self) -> Option<&::models::FacilityGeojson> {
    self.GEOSJON.as_ref()
  }

  pub fn reset_GEOSJON(&mut self) {
    self.GEOSJON = None;
  }

  pub fn set_created_date(&mut self, created_date: String) {
    self.created_date = created_date;
  }

  pub fn with_created_date(mut self, created_date: String) -> PermitEntrance {
    self.created_date = created_date;
    self
  }

  pub fn created_date(&self) -> &String {
    &self.created_date
  }


  pub fn set_last_updated_date(&mut self, last_updated_date: String) {
    self.last_updated_date = last_updated_date;
  }

  pub fn with_last_updated_date(mut self, last_updated_date: String) -> PermitEntrance {
    self.last_updated_date = last_updated_date;
    self
  }

  pub fn last_updated_date(&self) -> &String {
    &self.last_updated_date
  }


  pub fn set_ATTRIBUTES(&mut self, ATTRIBUTES: Vec<::models::Attribute>) {
    self.ATTRIBUTES = ATTRIBUTES;
  }

  pub fn with_ATTRIBUTES(mut self, ATTRIBUTES: Vec<::models::Attribute>) -> PermitEntrance {
    self.ATTRIBUTES = ATTRIBUTES;
    self
  }

  pub fn ATTRIBUTES(&self) -> &Vec<::models::Attribute> {
    &self.ATTRIBUTES
  }


  pub fn set_ENTITYMEDIA(&mut self, ENTITYMEDIA: Vec<::models::Media>) {
    self.ENTITYMEDIA = ENTITYMEDIA;
  }

  pub fn with_ENTITYMEDIA(mut self, ENTITYMEDIA: Vec<::models::Media>) -> PermitEntrance {
    self.ENTITYMEDIA = ENTITYMEDIA;
    self
  }

  pub fn ENTITYMEDIA(&self) -> &Vec<::models::Media> {
    &self.ENTITYMEDIA
  }


  pub fn set_ZONES(&mut self, ZONES: Vec<::models::Zone>) {
    self.ZONES = ZONES;
  }

  pub fn with_ZONES(mut self, ZONES: Vec<::models::Zone>) -> PermitEntrance {
    self.ZONES = ZONES;
    self
  }

  pub fn ZONES(&self) -> &Vec<::models::Zone> {
    &self.ZONES
  }


}



