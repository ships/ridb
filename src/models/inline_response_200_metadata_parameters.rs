/* 
 * RIDB API
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse200MetadataParameters {
  #[serde(rename = "QUERY")]
  QUERY: Option<String>,
  #[serde(rename = "LIMIT")]
  LIMIT: Option<i32>,
  #[serde(rename = "OFFSET")]
  OFFSET: Option<i32>
}

impl InlineResponse200MetadataParameters {
  pub fn new() -> InlineResponse200MetadataParameters {
    InlineResponse200MetadataParameters {
      QUERY: None,
      LIMIT: None,
      OFFSET: None
    }
  }

  pub fn set_QUERY(&mut self, QUERY: String) {
    self.QUERY = Some(QUERY);
  }

  pub fn with_QUERY(mut self, QUERY: String) -> InlineResponse200MetadataParameters {
    self.QUERY = Some(QUERY);
    self
  }

  pub fn QUERY(&self) -> Option<&String> {
    self.QUERY.as_ref()
  }

  pub fn reset_QUERY(&mut self) {
    self.QUERY = None;
  }

  pub fn set_LIMIT(&mut self, LIMIT: i32) {
    self.LIMIT = Some(LIMIT);
  }

  pub fn with_LIMIT(mut self, LIMIT: i32) -> InlineResponse200MetadataParameters {
    self.LIMIT = Some(LIMIT);
    self
  }

  pub fn LIMIT(&self) -> Option<&i32> {
    self.LIMIT.as_ref()
  }

  pub fn reset_LIMIT(&mut self) {
    self.LIMIT = None;
  }

  pub fn set_OFFSET(&mut self, OFFSET: i32) {
    self.OFFSET = Some(OFFSET);
  }

  pub fn with_OFFSET(mut self, OFFSET: i32) -> InlineResponse200MetadataParameters {
    self.OFFSET = Some(OFFSET);
    self
  }

  pub fn OFFSET(&self) -> Option<&i32> {
    self.OFFSET.as_ref()
  }

  pub fn reset_OFFSET(&mut self) {
    self.OFFSET = None;
  }

}



