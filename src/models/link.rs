/* 
 * RIDB API
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Link {
  #[serde(rename = "EntityLinkID")]
  entity_link_id: String,
  #[serde(rename = "LinkType")]
  link_type: String,
  #[serde(rename = "EntityID")]
  entity_id: String,
  #[serde(rename = "EntityType")]
  entity_type: String,
  #[serde(rename = "Title")]
  title: String,
  #[serde(rename = "Description")]
  description: String,
  #[serde(rename = "URL")]
  URL: String
}

impl Link {
  pub fn new(entity_link_id: String, link_type: String, entity_id: String, entity_type: String, title: String, description: String, URL: String) -> Link {
    Link {
      entity_link_id: entity_link_id,
      link_type: link_type,
      entity_id: entity_id,
      entity_type: entity_type,
      title: title,
      description: description,
      URL: URL
    }
  }

  pub fn set_entity_link_id(&mut self, entity_link_id: String) {
    self.entity_link_id = entity_link_id;
  }

  pub fn with_entity_link_id(mut self, entity_link_id: String) -> Link {
    self.entity_link_id = entity_link_id;
    self
  }

  pub fn entity_link_id(&self) -> &String {
    &self.entity_link_id
  }


  pub fn set_link_type(&mut self, link_type: String) {
    self.link_type = link_type;
  }

  pub fn with_link_type(mut self, link_type: String) -> Link {
    self.link_type = link_type;
    self
  }

  pub fn link_type(&self) -> &String {
    &self.link_type
  }


  pub fn set_entity_id(&mut self, entity_id: String) {
    self.entity_id = entity_id;
  }

  pub fn with_entity_id(mut self, entity_id: String) -> Link {
    self.entity_id = entity_id;
    self
  }

  pub fn entity_id(&self) -> &String {
    &self.entity_id
  }


  pub fn set_entity_type(&mut self, entity_type: String) {
    self.entity_type = entity_type;
  }

  pub fn with_entity_type(mut self, entity_type: String) -> Link {
    self.entity_type = entity_type;
    self
  }

  pub fn entity_type(&self) -> &String {
    &self.entity_type
  }


  pub fn set_title(&mut self, title: String) {
    self.title = title;
  }

  pub fn with_title(mut self, title: String) -> Link {
    self.title = title;
    self
  }

  pub fn title(&self) -> &String {
    &self.title
  }


  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> Link {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_URL(&mut self, URL: String) {
    self.URL = URL;
  }

  pub fn with_URL(mut self, URL: String) -> Link {
    self.URL = URL;
    self
  }

  pub fn URL(&self) -> &String {
    &self.URL
  }


}



