/* 
 * RIDB API
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Campsite {
  #[serde(rename = "CampsiteID")]
  campsite_id: String,
  #[serde(rename = "FacilityID")]
  facility_id: String,
  #[serde(rename = "CampsiteName")]
  campsite_name: String,
  #[serde(rename = "CampsiteType")]
  campsite_type: String,
  #[serde(rename = "TypeOfUse")]
  type_of_use: String,
  #[serde(rename = "CampsiteAccessible")]
  campsite_accessible: bool,
  #[serde(rename = "CampsiteLongitude")]
  campsite_longitude: Option<f64>,
  #[serde(rename = "CampsiteLatitude")]
  campsite_latitude: Option<f64>,
  #[serde(rename = "CreatedDate")]
  created_date: String,
  #[serde(rename = "ATTRIBUTES")]
  ATTRIBUTES: Vec<::models::Attribute>,
  #[serde(rename = "PERMITTEDEQUIPMENT")]
  PERMITTEDEQUIPMENT: Vec<::models::PermittedEquipment>,
  #[serde(rename = "ENTITYMEDIA")]
  ENTITYMEDIA: Vec<::models::Media>
}

impl Campsite {
  pub fn new(campsite_id: String, facility_id: String, campsite_name: String, campsite_type: String, type_of_use: String, campsite_accessible: bool, created_date: String, ATTRIBUTES: Vec<::models::Attribute>, PERMITTEDEQUIPMENT: Vec<::models::PermittedEquipment>, ENTITYMEDIA: Vec<::models::Media>) -> Campsite {
    Campsite {
      campsite_id: campsite_id,
      facility_id: facility_id,
      campsite_name: campsite_name,
      campsite_type: campsite_type,
      type_of_use: type_of_use,
      campsite_accessible: campsite_accessible,
      campsite_longitude: None,
      campsite_latitude: None,
      created_date: created_date,
      ATTRIBUTES: ATTRIBUTES,
      PERMITTEDEQUIPMENT: PERMITTEDEQUIPMENT,
      ENTITYMEDIA: ENTITYMEDIA
    }
  }

  pub fn set_campsite_id(&mut self, campsite_id: String) {
    self.campsite_id = campsite_id;
  }

  pub fn with_campsite_id(mut self, campsite_id: String) -> Campsite {
    self.campsite_id = campsite_id;
    self
  }

  pub fn campsite_id(&self) -> &String {
    &self.campsite_id
  }


  pub fn set_facility_id(&mut self, facility_id: String) {
    self.facility_id = facility_id;
  }

  pub fn with_facility_id(mut self, facility_id: String) -> Campsite {
    self.facility_id = facility_id;
    self
  }

  pub fn facility_id(&self) -> &String {
    &self.facility_id
  }


  pub fn set_campsite_name(&mut self, campsite_name: String) {
    self.campsite_name = campsite_name;
  }

  pub fn with_campsite_name(mut self, campsite_name: String) -> Campsite {
    self.campsite_name = campsite_name;
    self
  }

  pub fn campsite_name(&self) -> &String {
    &self.campsite_name
  }


  pub fn set_campsite_type(&mut self, campsite_type: String) {
    self.campsite_type = campsite_type;
  }

  pub fn with_campsite_type(mut self, campsite_type: String) -> Campsite {
    self.campsite_type = campsite_type;
    self
  }

  pub fn campsite_type(&self) -> &String {
    &self.campsite_type
  }


  pub fn set_type_of_use(&mut self, type_of_use: String) {
    self.type_of_use = type_of_use;
  }

  pub fn with_type_of_use(mut self, type_of_use: String) -> Campsite {
    self.type_of_use = type_of_use;
    self
  }

  pub fn type_of_use(&self) -> &String {
    &self.type_of_use
  }


  pub fn set_campsite_accessible(&mut self, campsite_accessible: bool) {
    self.campsite_accessible = campsite_accessible;
  }

  pub fn with_campsite_accessible(mut self, campsite_accessible: bool) -> Campsite {
    self.campsite_accessible = campsite_accessible;
    self
  }

  pub fn campsite_accessible(&self) -> &bool {
    &self.campsite_accessible
  }


  pub fn set_campsite_longitude(&mut self, campsite_longitude: f64) {
    self.campsite_longitude = Some(campsite_longitude);
  }

  pub fn with_campsite_longitude(mut self, campsite_longitude: f64) -> Campsite {
    self.campsite_longitude = Some(campsite_longitude);
    self
  }

  pub fn campsite_longitude(&self) -> Option<&f64> {
    self.campsite_longitude.as_ref()
  }

  pub fn reset_campsite_longitude(&mut self) {
    self.campsite_longitude = None;
  }

  pub fn set_campsite_latitude(&mut self, campsite_latitude: f64) {
    self.campsite_latitude = Some(campsite_latitude);
  }

  pub fn with_campsite_latitude(mut self, campsite_latitude: f64) -> Campsite {
    self.campsite_latitude = Some(campsite_latitude);
    self
  }

  pub fn campsite_latitude(&self) -> Option<&f64> {
    self.campsite_latitude.as_ref()
  }

  pub fn reset_campsite_latitude(&mut self) {
    self.campsite_latitude = None;
  }

  pub fn set_created_date(&mut self, created_date: String) {
    self.created_date = created_date;
  }

  pub fn with_created_date(mut self, created_date: String) -> Campsite {
    self.created_date = created_date;
    self
  }

  pub fn created_date(&self) -> &String {
    &self.created_date
  }


  pub fn set_ATTRIBUTES(&mut self, ATTRIBUTES: Vec<::models::Attribute>) {
    self.ATTRIBUTES = ATTRIBUTES;
  }

  pub fn with_ATTRIBUTES(mut self, ATTRIBUTES: Vec<::models::Attribute>) -> Campsite {
    self.ATTRIBUTES = ATTRIBUTES;
    self
  }

  pub fn ATTRIBUTES(&self) -> &Vec<::models::Attribute> {
    &self.ATTRIBUTES
  }


  pub fn set_PERMITTEDEQUIPMENT(&mut self, PERMITTEDEQUIPMENT: Vec<::models::PermittedEquipment>) {
    self.PERMITTEDEQUIPMENT = PERMITTEDEQUIPMENT;
  }

  pub fn with_PERMITTEDEQUIPMENT(mut self, PERMITTEDEQUIPMENT: Vec<::models::PermittedEquipment>) -> Campsite {
    self.PERMITTEDEQUIPMENT = PERMITTEDEQUIPMENT;
    self
  }

  pub fn PERMITTEDEQUIPMENT(&self) -> &Vec<::models::PermittedEquipment> {
    &self.PERMITTEDEQUIPMENT
  }


  pub fn set_ENTITYMEDIA(&mut self, ENTITYMEDIA: Vec<::models::Media>) {
    self.ENTITYMEDIA = ENTITYMEDIA;
  }

  pub fn with_ENTITYMEDIA(mut self, ENTITYMEDIA: Vec<::models::Media>) -> Campsite {
    self.ENTITYMEDIA = ENTITYMEDIA;
    self
  }

  pub fn ENTITYMEDIA(&self) -> &Vec<::models::Media> {
    &self.ENTITYMEDIA
  }


}



