/* 
 * RIDB API
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RecreationAreaAddress {
  #[serde(rename = "RecAreaAddressID")]
  rec_area_address_id: String,
  #[serde(rename = "RecAreaID")]
  rec_area_id: String,
  #[serde(rename = "RecAreaAddressType")]
  rec_area_address_type: String,
  #[serde(rename = "RecAreaStreetAddress1")]
  rec_area_street_address1: String,
  #[serde(rename = "RecAreaStreetAddress2")]
  rec_area_street_address2: String,
  #[serde(rename = "RecAreaStreetAddress3")]
  rec_area_street_address3: String,
  #[serde(rename = "City")]
  city: String,
  #[serde(rename = "PostalCode")]
  postal_code: String,
  #[serde(rename = "AddressStateCode")]
  address_state_code: String,
  #[serde(rename = "AddressCountryCode")]
  address_country_code: String
}

impl RecreationAreaAddress {
  pub fn new(rec_area_address_id: String, rec_area_id: String, rec_area_address_type: String, rec_area_street_address1: String, rec_area_street_address2: String, rec_area_street_address3: String, city: String, postal_code: String, address_state_code: String, address_country_code: String) -> RecreationAreaAddress {
    RecreationAreaAddress {
      rec_area_address_id: rec_area_address_id,
      rec_area_id: rec_area_id,
      rec_area_address_type: rec_area_address_type,
      rec_area_street_address1: rec_area_street_address1,
      rec_area_street_address2: rec_area_street_address2,
      rec_area_street_address3: rec_area_street_address3,
      city: city,
      postal_code: postal_code,
      address_state_code: address_state_code,
      address_country_code: address_country_code
    }
  }

  pub fn set_rec_area_address_id(&mut self, rec_area_address_id: String) {
    self.rec_area_address_id = rec_area_address_id;
  }

  pub fn with_rec_area_address_id(mut self, rec_area_address_id: String) -> RecreationAreaAddress {
    self.rec_area_address_id = rec_area_address_id;
    self
  }

  pub fn rec_area_address_id(&self) -> &String {
    &self.rec_area_address_id
  }


  pub fn set_rec_area_id(&mut self, rec_area_id: String) {
    self.rec_area_id = rec_area_id;
  }

  pub fn with_rec_area_id(mut self, rec_area_id: String) -> RecreationAreaAddress {
    self.rec_area_id = rec_area_id;
    self
  }

  pub fn rec_area_id(&self) -> &String {
    &self.rec_area_id
  }


  pub fn set_rec_area_address_type(&mut self, rec_area_address_type: String) {
    self.rec_area_address_type = rec_area_address_type;
  }

  pub fn with_rec_area_address_type(mut self, rec_area_address_type: String) -> RecreationAreaAddress {
    self.rec_area_address_type = rec_area_address_type;
    self
  }

  pub fn rec_area_address_type(&self) -> &String {
    &self.rec_area_address_type
  }


  pub fn set_rec_area_street_address1(&mut self, rec_area_street_address1: String) {
    self.rec_area_street_address1 = rec_area_street_address1;
  }

  pub fn with_rec_area_street_address1(mut self, rec_area_street_address1: String) -> RecreationAreaAddress {
    self.rec_area_street_address1 = rec_area_street_address1;
    self
  }

  pub fn rec_area_street_address1(&self) -> &String {
    &self.rec_area_street_address1
  }


  pub fn set_rec_area_street_address2(&mut self, rec_area_street_address2: String) {
    self.rec_area_street_address2 = rec_area_street_address2;
  }

  pub fn with_rec_area_street_address2(mut self, rec_area_street_address2: String) -> RecreationAreaAddress {
    self.rec_area_street_address2 = rec_area_street_address2;
    self
  }

  pub fn rec_area_street_address2(&self) -> &String {
    &self.rec_area_street_address2
  }


  pub fn set_rec_area_street_address3(&mut self, rec_area_street_address3: String) {
    self.rec_area_street_address3 = rec_area_street_address3;
  }

  pub fn with_rec_area_street_address3(mut self, rec_area_street_address3: String) -> RecreationAreaAddress {
    self.rec_area_street_address3 = rec_area_street_address3;
    self
  }

  pub fn rec_area_street_address3(&self) -> &String {
    &self.rec_area_street_address3
  }


  pub fn set_city(&mut self, city: String) {
    self.city = city;
  }

  pub fn with_city(mut self, city: String) -> RecreationAreaAddress {
    self.city = city;
    self
  }

  pub fn city(&self) -> &String {
    &self.city
  }


  pub fn set_postal_code(&mut self, postal_code: String) {
    self.postal_code = postal_code;
  }

  pub fn with_postal_code(mut self, postal_code: String) -> RecreationAreaAddress {
    self.postal_code = postal_code;
    self
  }

  pub fn postal_code(&self) -> &String {
    &self.postal_code
  }


  pub fn set_address_state_code(&mut self, address_state_code: String) {
    self.address_state_code = address_state_code;
  }

  pub fn with_address_state_code(mut self, address_state_code: String) -> RecreationAreaAddress {
    self.address_state_code = address_state_code;
    self
  }

  pub fn address_state_code(&self) -> &String {
    &self.address_state_code
  }


  pub fn set_address_country_code(&mut self, address_country_code: String) {
    self.address_country_code = address_country_code;
  }

  pub fn with_address_country_code(mut self, address_country_code: String) -> RecreationAreaAddress {
    self.address_country_code = address_country_code;
    self
  }

  pub fn address_country_code(&self) -> &String {
    &self.address_country_code
  }


}



