/* 
 * RIDB API
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Media {
  #[serde(rename = "EntityMediaID")]
  entity_media_id: String,
  #[serde(rename = "MediaType")]
  media_type: String,
  #[serde(rename = "EntityID")]
  entity_id: String,
  #[serde(rename = "EntityType")]
  entity_type: String,
  #[serde(rename = "Title")]
  title: String,
  #[serde(rename = "Subtitle")]
  subtitle: String,
  #[serde(rename = "Description")]
  description: String,
  #[serde(rename = "EmbedCode")]
  embed_code: String,
  #[serde(rename = "Height")]
  height: i32,
  #[serde(rename = "Width")]
  width: i32,
  #[serde(rename = "URL")]
  URL: String,
  #[serde(rename = "Credits")]
  credits: String
}

impl Media {
  pub fn new(entity_media_id: String, media_type: String, entity_id: String, entity_type: String, title: String, subtitle: String, description: String, embed_code: String, height: i32, width: i32, URL: String, credits: String) -> Media {
    Media {
      entity_media_id: entity_media_id,
      media_type: media_type,
      entity_id: entity_id,
      entity_type: entity_type,
      title: title,
      subtitle: subtitle,
      description: description,
      embed_code: embed_code,
      height: height,
      width: width,
      URL: URL,
      credits: credits
    }
  }

  pub fn set_entity_media_id(&mut self, entity_media_id: String) {
    self.entity_media_id = entity_media_id;
  }

  pub fn with_entity_media_id(mut self, entity_media_id: String) -> Media {
    self.entity_media_id = entity_media_id;
    self
  }

  pub fn entity_media_id(&self) -> &String {
    &self.entity_media_id
  }


  pub fn set_media_type(&mut self, media_type: String) {
    self.media_type = media_type;
  }

  pub fn with_media_type(mut self, media_type: String) -> Media {
    self.media_type = media_type;
    self
  }

  pub fn media_type(&self) -> &String {
    &self.media_type
  }


  pub fn set_entity_id(&mut self, entity_id: String) {
    self.entity_id = entity_id;
  }

  pub fn with_entity_id(mut self, entity_id: String) -> Media {
    self.entity_id = entity_id;
    self
  }

  pub fn entity_id(&self) -> &String {
    &self.entity_id
  }


  pub fn set_entity_type(&mut self, entity_type: String) {
    self.entity_type = entity_type;
  }

  pub fn with_entity_type(mut self, entity_type: String) -> Media {
    self.entity_type = entity_type;
    self
  }

  pub fn entity_type(&self) -> &String {
    &self.entity_type
  }


  pub fn set_title(&mut self, title: String) {
    self.title = title;
  }

  pub fn with_title(mut self, title: String) -> Media {
    self.title = title;
    self
  }

  pub fn title(&self) -> &String {
    &self.title
  }


  pub fn set_subtitle(&mut self, subtitle: String) {
    self.subtitle = subtitle;
  }

  pub fn with_subtitle(mut self, subtitle: String) -> Media {
    self.subtitle = subtitle;
    self
  }

  pub fn subtitle(&self) -> &String {
    &self.subtitle
  }


  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> Media {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_embed_code(&mut self, embed_code: String) {
    self.embed_code = embed_code;
  }

  pub fn with_embed_code(mut self, embed_code: String) -> Media {
    self.embed_code = embed_code;
    self
  }

  pub fn embed_code(&self) -> &String {
    &self.embed_code
  }


  pub fn set_height(&mut self, height: i32) {
    self.height = height;
  }

  pub fn with_height(mut self, height: i32) -> Media {
    self.height = height;
    self
  }

  pub fn height(&self) -> &i32 {
    &self.height
  }


  pub fn set_width(&mut self, width: i32) {
    self.width = width;
  }

  pub fn with_width(mut self, width: i32) -> Media {
    self.width = width;
    self
  }

  pub fn width(&self) -> &i32 {
    &self.width
  }


  pub fn set_URL(&mut self, URL: String) {
    self.URL = URL;
  }

  pub fn with_URL(mut self, URL: String) -> Media {
    self.URL = URL;
    self
  }

  pub fn URL(&self) -> &String {
    &self.URL
  }


  pub fn set_credits(&mut self, credits: String) {
    self.credits = credits;
  }

  pub fn with_credits(mut self, credits: String) -> Media {
    self.credits = credits;
    self
  }

  pub fn credits(&self) -> &String {
    &self.credits
  }


}



