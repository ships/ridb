/* 
 * RIDB API
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct DefaultApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> DefaultApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DefaultApiClient<C> {
        DefaultApiClient {
            configuration: configuration,
        }
    }
}

pub trait DefaultApi {
    fn get_activity(&self, activity_id: &str) -> Box<Future<Item = ::models::Activity, Error = Error<serde_json::Value>>>;
    fn get_all_facility_media(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_all_rec_area_media(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_campsite(&self, campsite_id: &str) -> Box<Future<Item = ::models::Campsite, Error = Error<serde_json::Value>>>;
    fn get_event(&self, event_id: &str) -> Box<Future<Item = ::models::Event, Error = Error<serde_json::Value>>>;
    fn get_facility(&self, facility_id: &str) -> Box<Future<Item = ::models::Facility, Error = Error<serde_json::Value>>>;
    fn get_facility_activities(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_activity(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_address(&self, facility_address_id: &str) -> Box<Future<Item = ::models::FacilityAddress, Error = Error<serde_json::Value>>>;
    fn get_facility_campsite(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_campsites(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_event(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_events(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_facility_address(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_facility_addresses(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_link(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_links(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_media(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_permit_entrance(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_permit_entrances(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_tour(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_facility_tours(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_link(&self, link_id: &str) -> Box<Future<Item = ::models::Link, Error = Error<serde_json::Value>>>;
    fn get_media(&self, media_id: &str) -> Box<Future<Item = ::models::Media, Error = Error<serde_json::Value>>>;
    fn get_organization(&self, org_id: &str) -> Box<Future<Item = Vec<::models::Organization>, Error = Error<serde_json::Value>>>;
    fn get_organization_facility(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_organization_rec_area(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_organization_rec_areas(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_permit_entrance(&self, permit_entrance_id: &str) -> Box<Future<Item = ::models::PermitEntrance, Error = Error<serde_json::Value>>>;
    fn get_permit_entrance_attributes(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_rec_area(&self, rec_area_id: &str) -> Box<Future<Item = ::models::RecreationArea, Error = Error<serde_json::Value>>>;
    fn get_rec_area_activities(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_rec_area_activity(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_rec_area_address(&self, rec_area_address_id: &str) -> Box<Future<Item = ::models::RecreationAreaAddress, Error = Error<serde_json::Value>>>;
    fn get_rec_area_event(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_rec_area_events(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_rec_area_facility(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_rec_area_link(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_rec_area_links(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_rec_area_media(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_rec_area_rec_area_address(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_rec_area_rec_area_addresses(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_tour(&self, tour_id: &str) -> Box<Future<Item = ::models::Tour, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>DefaultApi for DefaultApiClient<C> {
    fn get_activity(&self, activity_id: &str) -> Box<Future<Item = ::models::Activity, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/activities/{activityId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("activityId".to_string(), activity_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_all_facility_media(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/media".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_all_rec_area_media(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareas/{recAreaId}/media".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_campsite(&self, campsite_id: &str) -> Box<Future<Item = ::models::Campsite, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/campsites/{campsiteId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("campsiteId".to_string(), campsite_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_event(&self, event_id: &str) -> Box<Future<Item = ::models::Event, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/events/{eventId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("eventId".to_string(), event_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_facility(&self, facility_id: &str) -> Box<Future<Item = ::models::Facility, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("facilityId".to_string(), facility_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_facility_activities(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/activities".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_activity(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/activities/{activityId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_address(&self, facility_address_id: &str) -> Box<Future<Item = ::models::FacilityAddress, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilityaddresses/{facilityAddressId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("facilityAddressId".to_string(), facility_address_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_facility_campsite(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/campsites/{campsiteId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_campsites(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/campsites".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_event(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/events/{eventId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_events(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/events".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_facility_address(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/facilityaddresses/{facilityAddressId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_facility_addresses(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/facilityaddresses".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_link(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/links/{linkId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_links(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/links".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_media(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/media/{mediaId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_permit_entrance(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/permitentrances/{permitEntranceId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_permit_entrances(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/permitentrances".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_tour(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/tours/{tourId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_facility_tours(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/facilities/{facilityId}/tours".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_link(&self, link_id: &str) -> Box<Future<Item = ::models::Link, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/links/{linkId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("linkId".to_string(), link_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_media(&self, media_id: &str) -> Box<Future<Item = ::models::Media, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/media/{mediaId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("mediaId".to_string(), media_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_organization(&self, org_id: &str) -> Box<Future<Item = Vec<::models::Organization>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/organizations/{orgId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("orgId".to_string(), org_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_organization_facility(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/organizations/{orgId}/facilities/{facilityId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_organization_rec_area(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/organizations/{orgId}/recareas/{recAreaId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_organization_rec_areas(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/organizations/{orgId}/recareas".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_permit_entrance(&self, permit_entrance_id: &str) -> Box<Future<Item = ::models::PermitEntrance, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/permitentrances/{permitentranceId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("permitEntranceId".to_string(), permit_entrance_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_permit_entrance_attributes(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/permitentrances/{permitEntranceId}/attributes".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_rec_area(&self, rec_area_id: &str) -> Box<Future<Item = ::models::RecreationArea, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareas/{recAreaId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("recAreaId".to_string(), rec_area_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_rec_area_activities(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareas/{recAreaId}/activities".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_rec_area_activity(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareas/{recAreaId}/activities/{activityId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_rec_area_address(&self, rec_area_address_id: &str) -> Box<Future<Item = ::models::RecreationAreaAddress, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareaaddresses/{recAreaAddressId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("recAreaAddressId".to_string(), rec_area_address_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_rec_area_event(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareas/{recAreaId}/events/{eventId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_rec_area_events(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareas/{recAreaId}/events".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_rec_area_facility(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareas/{recAreaId}/facilities/{facilityId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_rec_area_link(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareas/{recAreaId}/links/{linkId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_rec_area_links(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareas/{recAreaId}/links".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_rec_area_media(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareas/{recAreaId}/media/{mediaId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_rec_area_rec_area_address(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareas/{recAreaId}/recareaaddresses/{recAreaAddressId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_rec_area_rec_area_addresses(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/recareas/{recAreaId}/recareaaddresses".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_tour(&self, tour_id: &str) -> Box<Future<Item = ::models::Tour, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/tours/{tourId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("tourId".to_string(), tour_id.to_string())
            .execute(self.configuration.borrow())
    }

}
