/* 
 * RIDB API
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration};

pub struct RecreationAreasApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl RecreationAreasApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> RecreationAreasApiClient {
        RecreationAreasApiClient {
            configuration: configuration,
        }
    }
}

pub trait RecreationAreasApi {
    fn get_rec_areas(&self, full: &str, state: Vec<String>, activity: Vec<String>, latitude: f64, longitude: f64, radius: f64, lastupdated: &str, sort: &str) -> Result<::models::InlineResponse2001, Error>;
}


impl RecreationAreasApi for RecreationAreasApiClient {
    fn get_rec_areas(&self, full: &str, state: Vec<String>, activity: Vec<String>, latitude: f64, longitude: f64, radius: f64, lastupdated: &str, sort: &str) -> Result<::models::InlineResponse2001, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("full", &full.to_string());
            query.append_pair("state", &state.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string());
            query.append_pair("activity", &activity.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string());
            query.append_pair("latitude", &latitude.to_string());
            query.append_pair("longitude", &longitude.to_string());
            query.append_pair("radius", &radius.to_string());
            query.append_pair("lastupdated", &lastupdated.to_string());
            query.append_pair("sort", &sort.to_string());

            query.finish()
        };
        let uri_str = format!("{}/recareas?{}", configuration.base_path, query_string);

        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }


        
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("apikey", val);
        };
        


        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
