/* 
 * RIDB API
 *
 * The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ZonesApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ZonesApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ZonesApiClient<C> {
        ZonesApiClient {
            configuration: configuration,
        }
    }
}

pub trait ZonesApi {
    fn get_permit_entrance_zone(&self, zone_id: &str) -> Box<Future<Item = ::models::Zone, Error = Error<serde_json::Value>>>;
    fn get_permit_entrance_zones(&self, ) -> Box<Future<Item = ::models::InlineResponse20010, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>ZonesApi for ZonesApiClient<C> {
    fn get_permit_entrance_zone(&self, zone_id: &str) -> Box<Future<Item = ::models::Zone, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/permitentrances/{permitEntranceId}/zones/{zoneId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .with_path_param("zoneId".to_string(), zone_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_permit_entrance_zones(&self, ) -> Box<Future<Item = ::models::InlineResponse20010, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/permitentrances/{permitEntranceId}/zones".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "apikey".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

}
